generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique(map: "email") @db.VarChar(40)
  password                String                    @db.VarChar(60)
  name                    String?                   @db.VarChar(10)
  nickname                String?                   @db.VarChar(10)
  gender                  Int?
  birth                   DateTime?
  phone                   String?                   @unique(map: "phone") @db.VarChar(15)
  image                   String?                   @db.VarChar(50)
  createdAt               DateTime                  @default(now()) @map("created_at")
  modifiedAt              DateTime?                 @updatedAt @map("modified_at")
  isCompleted             Boolean                   @default(false) @map("is_completed")
  alarm                   Alarm[]
  crew                    Crew[]
  crewUser                CrewMember[]
  crewRecruitAppliedStep1 CrewRecruitAppliedStep1[]
  crewRecruitAppliedStep2 CrewRecruitAppliedStep2[]
  crewRegister            CrewRegister[]
  refreshToken            RefreshToken[]
  @@map("user")
}

model Region {
  id   Int    @id @default(autoincrement())
  sido String @db.VarChar(50)
  goo  String @db.VarChar(50)
  crew Crew[]

  @@map("region")
}

model CrewCategory {
  id                      Int                       @id @default(autoincrement())
  content                 String                    @db.VarChar(20)
  crew                    Crew[]
  crewRecruitAppliedStep1 CrewRecruitAppliedStep1[]

  @@map("crew_category")
}

model Crew {
  id                      Int                       @id @default(autoincrement())
  title                   String                    @db.VarChar(30)
  content                 String                    @db.VarChar(50)
  introduction            String                    @db.Text
  score                   Float
  crewCapacity            Int                       @map("crew_capacity")
  createdAt               DateTime                  @default(now()) @map("created_at")
  modifiedAt              DateTime?                 @updatedAt @map("modified_at")
  noticeCount             Int                       @default(0) @map("notice_count")
  postCount               Int                       @default(0) @map("post_count")
  bannerImage             String?                   @map("banner_image") @db.VarChar(50)
  ageLimit                Int                       @map("age_limit")
  genderLimit             Int                       @map("gender_limit")
  userId                  Int                       @map("user_id")
  categoryId              Int                       @map("category_id")
  regionId                Int                       @map("region_id")
  recruitMessage          String                    @map("recruit_message") @db.Text
  alarm                   Alarm[]
  crewCategory            CrewCategory              @relation(fields: [categoryId], references: [id])
  region                  Region                    @relation(fields: [regionId], references: [id])
  user                    User                      @relation(fields: [userId], references: [id])
  crewActivity            CrewActivity[]
  crewAlbum               CrewAlbum[]
  crewUser                CrewMember[]
  crewNotice              CrewNotice[]
  crewPlan                CrewPlan[]
  crewPost                CrewPost[]
  crewRecruitAppliedStep1 CrewRecruitAppliedStep1[]
  crewRecruitForm         CrewRecruitForm[]
  crewRegister            CrewRegister[]
  crewStyle               CrewStyle[]

  @@index([categoryId], map: "crew_category_id_fkey")
  @@index([regionId], map: "crew_region_id_fkey")
  @@index([userId], map: "crew_user_id_fkey")
  @@map("crew")
}

model CrewPlan {
  id                   Int               @id @default(autoincrement())
  day                  DateTime
  title                String            @db.VarChar(30)
  content              String            @db.Text
  type                 Int               @default(0)
  createdAt            DateTime          @default(now()) @map("created_at")
  crewId               Int               @map("crew_id")
  allowComments        Boolean           @default(false) @map("allow_comments")
  allowExternalShare   Boolean           @default(false) @map("allow_external_share")
  allowPrivateComments Boolean           @default(false) @map("allow_private_comments")
  fee                  Int?              @default(0)
  feePurpose           String?           @map("fee_purpose") @db.VarChar(100)
  hasFee               Boolean           @default(false) @map("has_fee")
  isRequired           Boolean           @default(false) @map("is_required")
  crewMemberId         Int               @map("crew_member_id")
  alarm                Alarm[]
  crew                 Crew              @relation(fields: [crewId], references: [id])
  crewMember           CrewMember        @relation(fields: [crewMemberId], references: [id])
  crewPlanComment      CrewPlanComment[]
  crewPlanLike         CrewPlanLike[]
  crewPlanRequest      CrewPlanRequest[]

  @@index([crewId], map: "crew_plan_crew_id_fkey")
  @@index([crewMemberId], map: "crew_plan_crew_member_id_fkey")
  @@map("crew_plan")
}

model CrewPlanComment {
  id           Int        @id @default(autoincrement())
  content      String     @db.Text
  createdAt    DateTime   @default(now()) @map("created_at")
  modifiedAt   DateTime?  @updatedAt @map("modified_at")
  crewPlanId   Int        @map("crew_plan_id")
  crewMemberId Int        @map("crew_member_id")
  isPublic     Boolean    @map("is_public")
  crewMember   CrewMember @relation(fields: [crewMemberId], references: [id])
  crewPlan     CrewPlan   @relation(fields: [crewPlanId], references: [id])

  @@index([crewMemberId], map: "crew_plan_comment_crew_member_id_fkey")
  @@index([crewPlanId], map: "crew_plan_comment_crew_plan_id_fkey")
  @@map("crew_plan_comment")
}

model CrewPlanRequest {
  id           Int        @id @default(autoincrement())
  status       Int        @default(0)
  crewMemberId Int        @map("crew_member_id")
  crewPlanId   Int        @map("crew_plan_id")
  crewMember   CrewMember @relation(fields: [crewMemberId], references: [id])
  crewPlan     CrewPlan   @relation(fields: [crewPlanId], references: [id])

  @@index([crewMemberId], map: "crew_plan_request_crew_member_id_fkey")
  @@index([crewPlanId], map: "crew_plan_request_crew_plan_id_fkey")
  @@map("crew_plan_request")
}

model CrewPlanLike {
  id           Int        @id @default(autoincrement())
  isLiked      Int        @default(1) @map("is_liked")
  crewMemberId Int        @map("crew_member_id")
  planId       Int        @map("plan_id")
  crewMember   CrewMember @relation(fields: [crewMemberId], references: [id])
  crewPlan     CrewPlan   @relation(fields: [planId], references: [id])

  @@unique([planId, crewMemberId])
  @@index([crewMemberId], map: "crew_plan_like_crew_member_id_fkey")
  @@map("crew_plan_like")
}

model CrewRegister {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  modifiedAt DateTime? @updatedAt @map("modified_at")
  userId     Int       @map("user_id")
  crewId     Int       @map("crew_id")
  crew       Crew      @relation(fields: [crewId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([crewId], map: "crew_register_crew_id_fkey")
  @@index([userId], map: "crew_register_user_id_fkey")
  @@map("crew_register")
}

model CrewMember {
  id                Int                 @id @default(autoincrement())
  role              Int
  createdAt         DateTime            @default(now()) @map("created_at")
  modifiedAt        DateTime?           @updatedAt @map("modified_at")
  userId            Int                 @map("user_id")
  crewId            Int                 @map("crew_id")
  crewAlbum         CrewAlbum[]
  crew              Crew                @relation(fields: [crewId], references: [id])
  user              User                @relation(fields: [userId], references: [id])
  crewNotice        CrewNotice[]
  crewNoticeComment CrewNoticeComment[]
  crewNoticeLike    CrewNoticeLike[]
  crewPlan          CrewPlan[]
  crewPlanComment   CrewPlanComment[]
  crewPlanLike      CrewPlanLike[]
  crewPlanRequest   CrewPlanRequest[]
  crewPost          CrewPost[]
  crewPostComment   CrewPostComment[]
  crewPostLike      CrewPostLike[]
  @@unique([userId, crewId])

  @@index([crewId], map: "crew_member_crew_id_fkey")
  @@index([userId], map: "crew_member_user_id_fkey")
  @@map("crew_member")
}

model CrewPost {
  id  Int @id @default(autoincrement())
  title String @db.VarChar(50)
  content String @db.Text
  commentCount Int @map("comment_count") @default(0)
  likeCount Int @map("like_count") @default(0)
  isPopular Boolean @map("is_popular") @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  modifiedAt DateTime? @updatedAt @map("modified_at")
  crewId  Int @map("crew_id")
  crewMemberId Int @map("crew_member_id")

  crew Crew @relation(fields: [crewId], references: [id], onDelete: Cascade)
  crewMember CrewMember @relation(fields: [crewMemberId], references: [id])
  crewPostComment CrewPostComment[]
  crewPostImage   CrewPostImage[]
  crewPostLike    CrewPostLike[]
  alarm           Alarm[]
  @@index([crewId], map: "crew_post_crew_id_fkey")
  @@index([crewMemberId], map: "crew_post_crew_member_id_fkey")
  @@map("crew_post")
}

model CrewPostImage {
  id        Int      @id @default(autoincrement())
  imageName String   @map("image_name") @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  postId    Int      @map("post_id")
  crewPost  CrewPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId], map: "crew_post_image_post_id_fkey")
  @@map("crew_post_image")
}

model CrewPostLike {
  id           Int        @id @default(autoincrement())
  isLiked      Int        @default(1) @map("is_liked")
  crewMemberId Int        @map("crew_member_id")
  postId       Int        @map("post_id")
  crewMember   CrewMember @relation(fields: [crewMemberId], references: [id], onDelete: Cascade)
  crewPost     CrewPost   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, crewMemberId])
  @@index([crewMemberId], map: "crew_post_like_crew_member_id_fkey")
  @@map("crew_post_like")
}

model CrewPostComment {
  id           Int        @id @default(autoincrement())
  content      String     @db.Text
  createdAt    DateTime   @default(now()) @map("created_at")
  modifiedAt   DateTime?  @updatedAt @map("modified_at")
  isPublic     Int        @map("is_public")
  crewMemberId Int        @map("crew_member_id")
  postId       Int        @map("post_id")
  crewMember   CrewMember @relation(fields: [crewMemberId], references: [id], onDelete: Cascade)
  crewPost     CrewPost   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([crewMemberId], map: "crew_post_comment_crew_member_id_fkey")
  @@index([postId], map: "crew_post_comment_post_id_fkey")
  @@map("crew_post_comment")
}

model CrewNotice {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(50)
  content           String              @db.Text
  createdAt         DateTime            @default(now()) @map("created_at")
  modifiedAt        DateTime?           @updatedAt @map("modified_at")
  crewId            Int                 @map("crew_id")
  crewMemberId      Int                 @map("crew_member_id")
  alarm             Alarm[]
  crew              Crew                @relation(fields: [crewId], references: [id])
  crewMember        CrewMember          @relation(fields: [crewMemberId], references: [id])
  crewNoticeComment CrewNoticeComment[]
  crewNoticeLike    CrewNoticeLike[]

  @@index([crewId], map: "crew_notice_crew_id_fkey")
  @@index([crewMemberId], map: "crew_notice_crew_member_id_fkey")
  @@map("crew_notice")
}

model CrewNoticeComment {
  id           Int        @id @default(autoincrement())
  content      String     @db.Text
  createdAt    DateTime   @default(now()) @map("created_at")
  modifiedAt   DateTime?  @updatedAt @map("modified_at")
  crewMemberId Int        @map("crew_member_id")
  crewNoticeId Int        @map("crew_notice_id")
  crewMember   CrewMember @relation(fields: [crewMemberId], references: [id])
  crewNotice   CrewNotice @relation(fields: [crewNoticeId], references: [id])

  @@index([crewMemberId], map: "crew_notice_comment_crew_member_id_fkey")
  @@index([crewNoticeId], map: "crew_notice_comment_crew_notice_id_fkey")
  @@map("crew_notice_comment")
}

model CrewNoticeLike {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now()) @map("created_at")
  crewNoticeId Int        @map("crew_notice_id")
  crewMemberId Int        @map("crew_member_id")
  crewMember   CrewMember @relation(fields: [crewMemberId], references: [id])
  crewNotice   CrewNotice @relation(fields: [crewNoticeId], references: [id])

  @@unique([crewNoticeId, crewMemberId])
  @@index([crewMemberId], map: "crew_notice_like_crew_member_id_fkey")
  @@map("crew_notice_like")
}

model CrewAlbum {
  id           Int        @id @default(autoincrement())
  image        String     @db.VarChar(50)
  createdAt    DateTime   @default(now()) @map("created_at")
  modifiedAt   DateTime?  @updatedAt @map("modified_at")
  crewId       Int        @map("crew_id")
  crewMemberId Int        @map("crew_member_id")
  crew         Crew       @relation(fields: [crewId], references: [id])
  crewMember   CrewMember @relation(fields: [crewMemberId], references: [id])

  @@index([crewId], map: "crew_album_crew_id_fkey")
  @@index([crewMemberId], map: "crew_album_crew_member_id_fkey")
  @@map("crew_album")
}

model Activity {
  id           Int            @id @default(autoincrement())
  content      String         @db.VarChar(20)
  crewActivity CrewActivity[]

  @@map("activity")
}

model CrewActivity {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  modifiedAt DateTime? @updatedAt @map("modified_at")
  crewId     Int       @map("crew_id")
  activityId Int       @map("activity_id")
  activity   Activity  @relation(fields: [activityId], references: [id])
  crew       Crew      @relation(fields: [crewId], references: [id])

  @@index([activityId], map: "crew_activity_activity_id_fkey")
  @@index([crewId], map: "crew_activity_crew_id_fkey")
  @@map("crew_activity")
}

model Style {
  id        Int         @id @default(autoincrement())
  content   String      @db.VarChar(20)
  crewStyle CrewStyle[]

  @@map("style")
}

model CrewStyle {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  modifiedAt DateTime? @updatedAt @map("modified_at")
  crewId     Int       @map("crew_id")
  styleId    Int       @map("style_id")
  crew       Crew      @relation(fields: [crewId], references: [id])
  style      Style     @relation(fields: [styleId], references: [id])

  @@index([crewId], map: "crew_style_crew_id_fkey")
  @@index([styleId], map: "crew_style_style_id_fkey")
  @@map("crew_style")
}

model CrewRecruitForm {
  id                      Int                       @id @default(autoincrement())
  question                String                    @db.VarChar(40)
  questionType            Int                       @map("question_type")
  choiceList              Json?                     @map("choice_list")
  isEtc                   Int                       @map("is_etc")
  required                Int
  crewId                  Int                       @map("crew_id")
  crewRecruitAppliedStep2 CrewRecruitAppliedStep2[]
  crew                    Crew                      @relation(fields: [crewId], references: [id])

  @@index([crewId], map: "crew_recruit_form_crew_id_fkey")
  @@map("crew_recruit_form")
}

model CrewRecruitAppliedStep1 {
  id           Int          @id @default(autoincrement())
  activityList Json         @map("activity_list")
  styleList    Json         @map("style_list")
  region       Int
  age          Int
  gender       Int
  createdAt    DateTime     @default(now()) @map("created_at")
  crewId       Int          @map("crew_id")
  userId       Int          @map("user_id")
  categoryId   Int          @map("category_id")
  status       Int          @default(0)
  crewCategory CrewCategory @relation(fields: [categoryId], references: [id])
  crew         Crew         @relation(fields: [crewId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([categoryId], map: "crew_recruit_applied_step1_category_id_fkey")
  @@index([crewId], map: "crew_recruit_applied_step1_crew_id_fkey")
  @@index([userId], map: "crew_recruit_applied_step1_user_id_fkey")
  @@map("crew_recruit_applied_step1")
}

model CrewRecruitAppliedStep2 {
  id              Int             @id @default(autoincrement())
  checkedChoices  Json?           @map("checked_choices")
  answer          String?
  createdAt       DateTime        @default(now()) @map("created_at")
  recruitFormId   Int             @map("recruit_form_id")
  userId          Int             @map("user_id")
  crewRecruitForm CrewRecruitForm @relation(fields: [recruitFormId], references: [id])
  user            User            @relation(fields: [userId], references: [id])

  @@index([recruitFormId], map: "crew_recruit_applied_step2_recruit_form_id_fkey")
  @@index([userId], map: "crew_recruit_applied_step2_user_id_fkey")
  @@map("crew_recruit_applied_step2")
}

model Alarm {
  id         Int        @id @default(autoincrement())
  content    String     @db.Text
  status     Int        @default(0)
  type       AlarmType
  createdAt  DateTime   @default(now()) @map("created_at")
  userId     Int        @map("user_id")
  crewId     Int        @map("crew_id")
  noticeId   Int        @map("notice_id")
  postId     Int        @map("post_id")
  planId     Int        @map("plan_id")
  crew       Crew       @relation(fields: [crewId], references: [id])
  crewNotice CrewNotice @relation(fields: [noticeId], references: [id])
  crewPlan   CrewPlan   @relation(fields: [planId], references: [id])
  crewPost   CrewPost   @relation(fields: [postId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@index([crewId], map: "alarm_crew_id_fkey")
  @@index([noticeId], map: "alarm_notice_id_fkey")
  @@index([planId], map: "alarm_plan_id_fkey")
  @@index([postId], map: "alarm_post_id_fkey")
  @@index([userId], map: "alarm_user_id_fkey")
  @@map("alarm")
}

enum AlarmType {
  CREW_JOIN_REQUEST
  CREW_JOIN_RESULT
  NOTICE_CREATED
  SCHEDULE_CREATED
  POST_LIKED
  POST_COMMENTED
  CREW_WARNED
  CREW_KICKED
}
model RefreshToken {
  id  Int @id @default(autoincrement())
  token String @db.Text
  userId Int @map("user_id")
  modifiedAt DateTime? @updatedAt @map("modified_at")
  user User @relation(fields: [userId], references: [id])

  @@map("refresh_token")
}
